{"version":3,"sources":["components/Board.js","App.js","serviceWorker.js","index.js"],"names":["style","paper","height","margin","textAlign","background","Board","props","board","map","e","index","Grid","item","xs","sm","key","onClick","handleClick","Typography","variant","component","hadleClick","Paper","children","container","spacing","SCORE","X","O","TIE","getIJ","i","j","App","state","msg","count","newGame","bind","aiTurn","handleWinner","startNewGame","this","setState","checkWin","cnt","winner","blank","isMaximizing","result","bestScore","Infinity","score","minmax","Math","max","min","_i","_j","bestMove","CssBaseline","Container","maxWidth","gutterBottom","Button","color","Link","href","className","aria-hidden","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ae3ef3f.chunk.js","sourcesContent":["import React from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n  const style={\r\n      paper:{\r\n          height:\"110px\",\r\n          margin:\"auto\",\r\n          textAlign:\"center\",\r\n          background:\"#555\"\r\n      }\r\n  }\r\nfunction Board(props) {\r\n    // let Board = ['','','','','','','','',''];\r\n    let board = [...props.board[0],...props.board[1],...props.board[2]].map((e,index)=>(\r\n        <Grid item xs={4} sm={4} key={index}>\r\n            <div onClick={()=>props.handleClick(index)} >\r\n                    <Typography variant=\"h1\" component=\"h1\" onClick = {props.hadleClick}>\r\n                    <Paper\r\n                        style={style.paper}\r\n                        children={e}\r\n                        />\r\n                    </Typography>\r\n                    </div>\r\n                </Grid>\r\n\r\n    ));\r\n    return (\r\n        <div>\r\n            <Grid container spacing={1}>\r\n                {board}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n;\r\nexport default Board;\r\n","import React, { Component } from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport Board from './components/Board';\nimport Button from '@material-ui/core/Button';\n\nconst ai = 'X';\nconst human = 'O';\nconst SCORE = {\n\tX: 1,\n\tO: -1,\n\tTIE: 0\n};\n\nconst getIJ =  [{i:0,j:0},{i:0,j:1},{i:0,j:2},{i:1,j:0},{i:1,j:1},{i:1,j:2},{i:2,j:0},{i:2,j:1},{i:2,j:2}];\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      board:[['','',''],['','',''],['','','']],\n      msg:\"It's Your Turn\",\n      count:0,\n      newGame:false\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.aiTurn = this.aiTurn.bind(this);\n    this.handleWinner = this.handleWinner.bind(this);\n    this.startNewGame=this.startNewGame.bind(this);\n  }\n\n  startNewGame(){\n    this.setState({\n      board:[['','',''],['','',''],['','','']],\n      msg:\"It's Your Turn\",\n      count:0,\n      newGame:false\n    });\n  }\n  handleWinner(){\n    switch(this.checkWin(this.state.board)){\n      case ai:\n        this.setState({msg:\"AI Win\",newGame:true});\n        break;\n      case human:\n        this.setState({msg:\"You bit AI\",newGame:true});\n        break;\n      case 'TIE':\n        this.setState({msg:\"Match Draw\",newGame:true});\n        break;\n      default:\n    }\n  }\n  handleClick(e){\n    let {i,j} = getIJ[e];\n    let board = this.state.board;\n    board[i][j]= human;\n    let count=this.state.count;\n    this.setState({board:board,count:count+1},()=>{\n      let cnt=this.state.count;\n      this.handleWinner();\n      if(cnt!==9) {\n        this.aiTurn();\n      }\n    });\n  }\n  //ai part\n  checkWin(board){\n    let winner = null;\n    let blank = 0;\n  \n    for (let i = 0; i < 3; i++) {\n      if (board[i][0] === board[i][1] && board[i][0] === board[i][2] && board[i][0] !== '') {\n        winner = board[i][0];\n        break;\n      } else if (board[0][i] === board[1][i] && board[0][i] === board[2][i] && board[0][i] !== '') {\n        winner = board[0][i];\n        break;\n      }\n    }\n    if (board[0][0] === board[1][1] && board[2][2] === board[1][1] && board[1][1] !== '') {\n      winner = board[0][0];\n    }\n    if (board[0][2] === board[1][1] && board[1][1] === board[2][0] && board[2][0] !== '') {\n      winner = board[2][0];\n    }\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[i][j] === '') blank++;\n      }\n    }\n    if (blank === 0 && winner === null) return 'TIE';\n    else return winner;\n  };\n  \n  minmax(board, isMaximizing){\n    let result = this.checkWin(board);\n    if (result != null) return SCORE[result];\n    let bestScore = isMaximizing ? -Infinity : Infinity;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[i][j] === '') {\n          board[i][j] = isMaximizing ? ai : human;\n          let score = this.minmax(board, !isMaximizing);\n          board[i][j] = '';\n          bestScore = isMaximizing ? Math.max(score, bestScore) : Math.min(score, bestScore);\n        }\n      }\n    }\n    return bestScore;\n  };\n  \n  bestMove(board){\n    let bestScore = -Infinity;\n    let _i, _j;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[i][j] === '') {\n          board[i][j] = ai;\n          let score = this.minmax(board, false);\n          board[i][j] = '';\n          bestScore = Math.max(score, bestScore);\n          if (bestScore === score) {\n            _i = i;\n            _j = j;\n          }\n        }\n      }\n    }\n    return { i: _i, j: _j };\n  };\n  //ai part over\n\n  aiTurn(){\n    let count = this.state.count;\n    let {i,j} = this.bestMove(this.state.board)\n    let board = this.state.board;\n    board[i][j]= ai;\n    this.setState({board:board,count:count+1},()=>{\n      let cnt=this.state.count;\n      this.handleWinner();\n      if(cnt===9) {\n        this.setState({msg:\"Start New Game\"});\n      }\n    });\n  }\n\n\n  render() {\n    let style={\n      btn:{\n        textAlign:\"center\",\n        margin:\"5px auto\"\n      }\n    }\n    // this.aiTurn();\n    return (\n      <div >\n        <CssBaseline />\n        <Container component=\"main\"  maxWidth=\"sm\">\n          <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n            TicTacToe\n          </Typography>\n          <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n            {'Never will Win'}\n          </Typography>\n          {this.state.newGame?<Button style={style.btn} variant=\"contained\" color=\"primary\" onClick={this.startNewGame} >NewGame</Button>:''}\n          <div>\n            <Board\n            board={this.state.board}\n            handleClick = {this.handleClick}\n            />\n            <Typography style={{color:\"red\",textAlign:\"center\"}} variant=\"h4\" component=\"h2\" >\n              {this.state.msg}\n            </Typography>\n          </div>\n        </Container>\n        <footer>\n          <Container maxWidth=\"sm\">\n            <Typography variant=\"body1\">Developed By kk007</Typography>\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n            <Link color=\"inherit\" href=\"https://www.instagram.com/ig_kk007/\">\n            <i className=\"fa fa-instagram\" aria-hidden=\"true\"></i>\n            </Link>\n            </Typography>\n          </Container>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}